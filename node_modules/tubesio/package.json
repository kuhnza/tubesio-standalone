{
  "name": "tubesio",
  "version": "0.1.17",
  "author": {
    "name": "tubes.io",
    "email": "support@tubes.io"
  },
  "description": "A collection of clients and utilities for interacting with tubes.io services via Node JS.",
  "homepage": "http://tubes.io",
  "bugs": "https://github.com/kuhnza/node-tubesio/issues",
  "contributors": [
    {
      "name": "Dave Kuhn",
      "email": "david.s.kuhn@gmail.com"
    }
  ],
  "main": "./lib/index.js",
  "preferGlobal": "true",
  "bin": {
    "tubesio": "./bin/tubesio"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kuhnza/node-tubesio.git"
  },
  "keywords": [
    "tubesio"
  ],
  "dependencies": {
    "async": "0.2.x",
    "cheerio": "0.10.x",
    "jsdom": "0.3.x",
    "nconf": "0.6.x",
    "npm": "1.2.x",
    "optimist": "0.3.x",
    "prompt": "0.2.x",
    "request": "2.16.x",
    "tunnel": "0.0.x",
    "underscore": "1.4.x",
    "underscore.string": "2.3.x"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.8.x"
  },
  "readme": "<pre>\n       ____   \n______|    |  \n      |    |    __        __                _        \n      |    |   / /___  __/ /_  ___  _____  (_)___   \n      |    |  / __/ / / / __ \\/ _ \\/ ___/ / / __ \\  \n      |    | / /_/ /_/ / /_/ /  __(__  ) / / /_/ /  \n      |    | \\__/\\__,_/_.___/\\___/____(_)_/\\____/   \n______|    |                                        \n      |____|                                         \n</pre>\n\nThe tubes.io library for [node](http://nodejs.org) is a collection of clients and utilities for \ninteracting with tubes.io services. The library consists of two parts:\n\n1. [Command Line Interface](#command-line-interface) (CLI)\n2. [tubesio lib](#tubesio-lib)\n\nThe CLI is used to manage scripts and deployments while the library is meant to be included\nin your node or coffee scripts to provide access to essential tubes.io services such as \nthe proxy servers and other commonly used tools.\n\n## Installation\n\n#### Installing npm\n\n`curl http://npmjs.org/install.sh | sh`\n\n#### Installing tubesio \n\n`[sudo] npm install -g tubesio`\n\n\n## Command Line Interface\n\nThe tubes.io CLI simplifies the process of environment setup and \nsubsequent management of scripts deployed on tubes.io. This is \nwhat you'll want to use if you plan on developing scripts using\nyour own IDE and storing scripts in some kind of version control\ninstead of the web-based interface.\n\n## Getting Started\n\nCreate a working directory where your scripts will live:\n\n`$ mkdir my_username && cd my_username`\n\nThen run:\n\n`$ tubesio init`\n\nThis command will prompt you for your tubes.io username and API\nkey. Your API key can be found on the edit profile page once\nlogged in over at [tubes.io](tubes.io).\n\nThis will download both the necessary and available libraries\nfor your script once deployed. It will also create a .tubesio\nfile in the current working directory containing your environment\nconfiguration.\n\n## Development Workflow\n\nThe current feature set is quite limited. Only automated \ndeployments are supported which means you will need to copy/paste\nexisting scripts from tubes.io to your local environment. Creating\nnew tubes must also be done from the tubes.io website.\n\nBy convention scripts should be named `<slug>.js` where slug\nis the slugified version of your tube's name. For example if your\ntube's name is My 1st Tube then your script name should be\n`my-1st-tube.js`. This generally means replacing spaces and\nspecial charachters with dashes. If you're unsure of what your\ntube's slug name is you should take a look at your tube's endpoint. \nThe slug will be the portion after the last \"/\" and before the format\n\".json\" (e.g. http://tubes.io/username/tube/_my-1st-tube_.json)\n\nOnce you've copied your hub down into your local work directory\nyou can deploy by running:\n\n`$ tubesio deploy my-1st-tube`\n\n> A word of warning: The change will take effect immediately. In\n> case you need to rollback, a backup of the previous script is \n> created with the .bak extension in your working directory. This\n> can be deployed using the `-f` switch to specify an alternate\n> file to use instead of the default. For example:\n>    `$ tubes.io deploy -f my-1st-tube.js.bak my-1st-tube`\n\nYou can test the deployed script by running:\n\n`curl <endpoint URL>`\n\n> Note: be sure to include your API key in the querystring and any other args your tube requires.\n\n## tubesio lib\n\nUsage of the tubesio node library is probably best demonstrated by example. Here's a simple node\nscript that performs a HTTP request, parses the resulting HTML and extracts the page title:\n\n```javascript\n// Required import\nvar tubesio = require('tubesio')('<username>', '<apiKey>');\n\n// Optional imports\nvar cheerio = require('cheerio');\n\n// Shortcuts\nrequest = tubesio.http.request,\nargs = tubesio.utils.args.demand('name'),\nlast = tubesio.utils.lastResult;\n\nrequest('http://tubes.io/', {\n    complete: function (err, body) {\n       if (err) {           \n           return tubesio.finish(err);\n       }\n\n       var $ = cheerio.load(body);\n       tubesio.finish(null, {\n           title: $('title').text(),\n           hello: args.name,\n           lastHello: last.hello\n       });            \n    }\n});\n```\n\nThe first line imports the tubesio lib. Notice the two arguments passed to the\ncall to require. This is required for authentication against tubesio services\nsuch as the HTTP proxies.\n\nNext we import [cheerio](https://github.com/MatthewMueller/cheerio) which is a\nnice, lightweight DOM parsing and normalizing library with support for jQuery\nlike selectors and syntax. We also create a shortcut reference to the tubesio\n[request](#request) method.\n\nAfter that we set up some additional shortcuts to the request method for brevity,\nthe tube arguments (passed as either GET or POST parameters) and the result of\nthe last tube run (this will be populated if you turn on \"Cache Last Result\" in\nyour tube settings).\n\nCalling the request method we pass the URL and attach a callback to the `complete` \nproperty of the request settings object. The callback is passed the body of\nthe resulting HTTP response. We then load the body into cheerio and extract the\ntitle text out. \n\nLastly a call to the [finish](#tubesio.finish) completes the request. It's\nimportant that all code paths eventually call `finish`. Neglecting to do so\nwill cause your script to timeout as the node runtime won't know when\nyour script is finished. The `finish` method is also important because the \ndata you pass to it is what gets returned from the API. \n\n> Note: `finish` only accepts objects that are JSON serializable (i.e. passing \n> a naked number or string won't work).\n\n\n### Modules\n\n* [tubesio](#tubesio)\n* [tubesio.http](#tubesiohttp)\n* [tubesio.logging](#tubesiologging)\n* [tubesio.utils](#tubesioutils)\n\n#### tubesio\n\n##### tubesio.finish(err, result)\n\nExits the current script.\n\nThe `err` argument if defined and an instance of `Error` will cause the script\nto exit with a non-zero exit code and will print the error message to stderr. The\nexit code defaults to 1 but may be overridden by setting the exitCode property of\nthe err object.\n\nThe `result` argument should be a plain Javascript object representing the\ndata you wish to output. The result will be passed through JSON.stringify and\nprinted to stdout before exiting with exit code 0.\n\n#### tubesio.http \n\n##### request(location, [settings])\n\nA vastly simplified and elegant HTTP request method. Supports smart\nswitching between HTTP/HTTPS based on URL, automatic GZIP and DEFLATE \ndecompression, object serialization and proxy servers. \n\n> Important: It's strongly advised that you use this function over \n> node's raw http.request or other third party libraries as it automatically \n> proxies requests via our IP rotation service. We will not provide support\n> for people wishing to use other methods.\n\nThe `location` argument should be a string containing a URL or an object \ncontaining a `location` property set to the URL being requested.\n\nThe `settings` argument can be either a callback function or an object\ncontaining a `complete` property set to the callback function to call\nwhen the request completes.\n\nSettings:\n\n* complete: a callback function that takes the arugments err, body.\n* cookieJar: an instance of CookieJar for cookie support. Defaults to null.\n* data: a string or object. Strings are sent verbatim whilst objects are serialized \naccording to the content-type set in the headers. Method will also be set to `POST` \nwhere method is not explicitly set. Currently detects `application/x-www-form-urlencoded` \nand `application/json`. Where no content-type header exists defaults to form encoding. \n* headers: an object containing key-value pairs of headers to send with request.\n* method: the HTTP method to perform the request with. Defaults to `GET`.\n\n##### setProxy(config)\n\nSets the global proxy configuration object. This will impact all requests during the lifetime\nof the script. Under normal circumstances calling setProxy is not required. Importing\nthe tubesio library automatically configures the correct proxy.\n\nThe `config` argument can be a string, object or function. Strings are processed using\nnode's [url.parse](http://nodejs.org/docs/latest/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost)\nmethod. When passing a function it should produce either a string or configuration object.\n\nConfiguration objects should conform to the following structure:\n\n```javascript\n{\n    host: 'hostname',\n    port: 80,\n    proxyAuth: 'user:pass'\n}\n```\n\n> Note: port and proxyAuth are optional. Defaults to port 80 and no authentication.\n\n##### Class: CookieJar\n\nCookieJar provides cookie support and persistance across HTTP requests. It behaves like\na browser for the most part, simply accepting cookies and storing their values as well \nas passing cookie values with subsequent requests.\n\nAs a rule you shouldn't need to use the CookieJar class directly. Creating a CookieJar\ninstance and passing it with your requests is all that's required.\n\nExample:\n\n```javascript\nvar cookieJar = tubesio.http.CookieJar();\n\nrequest('http://tubes.io', { \n    cookieJar: cookieJar,\n    complete: function () { ... }\n});\n```\n\n> Note: you should create the CookieJar instance in the global scope in order to persist\n> and reuse it across requests.\n\n###### cookieJar.get(key)\n\n###### cookieJar.getValue(key)\n\n###### cookieJar.set(cookieString)\n\n###### cookieJar.toString()\n\n#### tubesio.logging\n\n##### Class: Logger\n\nA logger that logs exclusively to stderr. Includes timestamps in log output \nand supports log level filtering.\n\n###### logger.log(level, message)\n\n###### logger.verbose(message)\n\n###### logger.info(message)\n\n###### logger.warn(message)\n\n###### logger.error(message)\n\n#### tubesio.utils\n\nUtility functions and helpful properties.\n\n##### args\n\nAn object containing your GET or POST parameters.\n\n##### lastResult\n\nAn object containing the result of the last successful run of your tube. One of it's uses is for diffing against the\ncurrent result set to see if anything has changed.\n\nThis property will be null unless \"Cache Last Result\" is turned on within the tube meta/settings.\n\n## Supported Languages\n\nOnly JavaScript and CoffeeScript running atop node is supported at present but we have \nplans to add more languages in future. If you'd like a particular language added then\n[let us know](mailto:ideas@tubes.io). The more support we get for a language the greater \nthe chance it will be added.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "tubesio@0.1.17",
  "dist": {
    "shasum": "17a98d3305346832c3cff08a13317224a9b92344",
    "tarball": "http://registry.npmjs.org/tubesio/-/tubesio-0.1.17.tgz"
  },
  "_from": "tubesio@*",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "kuhnza",
    "email": "david.s.kuhn@gmail.com"
  },
  "maintainers": [
    {
      "name": "kuhnza",
      "email": "david.s.kuhn@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "17a98d3305346832c3cff08a13317224a9b92344",
  "_resolved": "https://registry.npmjs.org/tubesio/-/tubesio-0.1.17.tgz"
}
